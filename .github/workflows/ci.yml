name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        rust: [stable, 1.87.0]
        c-compiler: ['']
        cxx-compiler: ['']
        target: ['']
        include:
          - os: ubuntu-latest
            rust: nightly
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            rust: stable
          - os: ubuntu-latest
            rust: stable
          - os: windows-latest
            target: i686-pc-windows-msvc
            rust: stable
          - os: windows-latest
            rust: stable
          - os: ubuntu-latest
            rust: stable
          - os: ubuntu-latest
            c-compiler: clang
            cxx-compiler: clang++
            rust: stable
          - os: ubuntu-latest
            c-compiler: gcc-11
            cxx-compiler: g++-11
            rust: stable
          - os: ubuntu-latest
            c-compiler: clang-15
            cxx-compiler: clang++-15
            rust: stable

    runs-on: ${{ matrix.os }}

    steps:
      - if: matrix.c-compiler == 'clang'
        name: Install clang
        run: |
          sudo apt-get update
          sudo apt-get install clang

      - if: matrix.c-compiler == 'clang-15'
        name: Install clang-15
        run: |
          sudo apt-get update
          sudo apt-get install clang-15

      - if: matrix.c-compiler == 'gcc-11'
        name: Install gcc-11
        run: |
          sudo apt-get update
          sudo apt-get install gcc-11 g++-11

      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
      - uses: actions/checkout@v3
      - name: Checkout submodule
        run: git submodule update --init --recursive

      - if: matrix.target != ''
        run: rustup target add ${{matrix.target}}

      - if: ${{ matrix.target != '' && matrix.os == 'ubuntu-latest' }}
        name: Install cross tools
        run: |
          sudo apt-get update
          sudo apt-get install gcc-multilib g++-multilib

      - if: ${{ matrix.target == '' && matrix.c-compiler == '' }}
        name: Build / test
        run: |
          rustc --version
          cargo build --verbose
          cargo test -- --nocapture
      - if: ${{ matrix.target == '' && matrix.c-compiler != '' }}
        name: Build / test with alt compiler
        env:
          CC: ${{matrix.c-compiler}}
          CXX: ${{matrix.cxx-compiler}}
        run: |
          $CC --version
          $CXX --version
          rustc --version
          cargo build --verbose
          cargo test -- --nocapture
          cargo test -p with_wasm_opt -- --nocapture
      - if: matrix.target != ''
        name: Build / test 32-bit
        run: |
          rustc --version
          cargo build --verbose --target=${{matrix.target}}
          cargo test --target=${{matrix.target}} -- --nocapture
          cargo test -p with_wasm_opt -- --nocapture

  non-dwarf:
    name: Without dwarf feature
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodule
        run: git submodule update --init --recursive
      - run: cargo test --no-default-features

  fmt:
    name: Cargo fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: cargo fmt --check
